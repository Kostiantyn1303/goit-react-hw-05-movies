{"version":3,"file":"static/js/956.a1741990.chunk.js","mappings":"gMACaA,E,QAAYC,EAAAA,IAAH,gN,SCEP,SAASC,IACtB,OACE,UAACF,EAAD,YACE,SAAC,KAAD,CACEG,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,IACT,MAIP,C,sJCdKC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIS,SAAeC,EAA9B,+CAAe,OAAf,oBAAe,WAAkCC,GAAlC,uFACUC,EAAAA,EAAAA,IAAA,6CACiBD,EADjB,mBAErBN,GAHW,WACPQ,EADO,QAKCC,OALD,sBAML,IAAIC,MAAMF,EAASC,QANd,gCAQND,EAASG,MARH,kE,sDCVFC,EAAQnB,EAAAA,EAAAA,GAAH,gDAGLoB,EAAQpB,EAAAA,EAAAA,EAAH,gDAGLqB,EAAWrB,EAAAA,EAAAA,EAAH,sEAIRsB,EAActB,EAAAA,EAAAA,EAAH,gDAGXuB,EAAiBvB,EAAAA,EAAAA,IAAH,yFAKdwB,EAAuBxB,EAAAA,EAAAA,GAAH,6CAGpByB,EAAoBzB,EAAAA,EAAAA,IAAH,4CAGjB0B,EAAY1B,EAAAA,EAAAA,IAAH,wD,SC+EtB,EAvFqB,WAAO,IAAD,IACzB,GAAsC2B,EAAAA,EAAAA,UAAS,CAAC,GAAhD,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQlB,GAAYmB,EAAAA,EAAAA,MAAZnB,QACFoB,GAAWC,EAAAA,EAAAA,MACXC,GAAanC,EAAAA,EAAAA,GAAOoC,EAAAA,GAAPpC,CAAH,2FAQVqC,GAAgBrC,EAAAA,EAAAA,GAAOoC,EAAAA,GAAPpC,CAAH,mOAcnBsC,EAAAA,EAAAA,YAAU,WACRC,EAAuB1B,EACxB,GAAE,CAACA,IAEJ,IAAM0B,EAAsB,mCAAG,WAAM1B,GAAN,8EAC7BkB,GAAa,GADgB,kBAIJnB,EAAmBC,GAJf,UAIrBE,EAJqB,6BAMnB,IAAIE,MAAM,eANS,OAS3BY,EAAed,GATY,2EAY3BgB,GAAa,GAZc,6EAAH,sDAiBtBS,EAAO,IAAIC,KAAKb,EAAYc,cAC5BC,EAAmC,GAA3Bf,EAAYgB,aAE1B,OACE,4BACE,SAACP,EAAD,CAAeQ,GAAE,oBAAEZ,EAASa,aAAX,aAAE,EAAgBC,YAAlB,QAA0B,IAA3C,SAAgD,aAChD,UAACrB,EAAD,WACG,KACD,0BACE,gBAAKsB,IAAG,UAVG,mCAUH,OAAkBpB,EAAYqB,aAAeC,IAAI,QAE3D,4BACE,UAAC/B,EAAD,WACGS,EAAYuB,MAAM,KAAGX,EAAKY,cAAc,QAE3C,UAAChC,EAAD,WAAO,cAAYiC,KAAKC,MAAMX,GAAO,SACrC,SAACtB,EAAD,UAAU,eACV,SAACC,EAAD,UAAcM,EAAY2B,kBAG9B,UAAC9B,EAAD,YACE,SAACF,EAAD,UAAgB,6BAChB,UAACC,EAAD,YACE,yBACE,SAACW,EAAD,CAAYU,GAAG,OAAf,SAAsB,YAExB,yBACE,SAACV,EAAD,CAAYU,GAAG,UAAf,SAAyB,oBAI9Bf,IAAa,SAAC,IAAD,KACd,SAAC,EAAA0B,SAAD,WACE,SAAC,KAAD,QAIP,C","sources":["components/Loading/Loading.styled.jsx","components/Loading/Loading.jsx","Api/ApiFilmDetails.jsx","pages/MovieDetails.styled.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nexport const LoaderBox = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* background-color: #f4efef; */\n  width: 100vw;\n  height: 100vh;\n`;\n","import { RotatingLines } from 'react-loader-spinner';\nimport { LoaderBox } from './Loading.styled';\n\nexport default function Loader() {\n  return (\n    <LoaderBox>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n      ;\n    </LoaderBox>\n  );\n}\n","import axios from 'axios';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwNjA3NTExMWQyODVkNjg4OTQ4MmNlYzRkYWZlYWIwZiIsInN1YiI6IjY0NzBhYjk4NTQzN2Y1MDEwNTVkNGIxZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.mRwEl_U4MyMEALk_4oMS15bcG2msMRPjTcvYuIf-KU8',\n  },\n};\n\nexport default async function fetchMoviesDetails(movieId) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?language=en-US`,\n    options\n  );\n  if (!response.status) {\n    throw new Error(response.status);\n  }\n  return response.data;\n}\n","import styled from '@emotion/styled';\nexport const Title = styled.h1`\n  margin-bottom: 10px;\n`;\nexport const Scors = styled.p`\n  margin-bottom: 10px;\n`;\nexport const Owerview = styled.p`\n  margin-bottom: 10px;\n  font-weight: bold;\n`;\nexport const Information = styled.p`\n  margin-bottom: 10px;\n`;\nexport const AddInformation = styled.div`\n  margin-bottom: 5px;\n  font-size: 24px;\n  font-weight: bold;\n`;\nexport const MovieDetailsLinkList = styled.ul`\n  list-style: none;\n`;\nexport const AddInformationbox = styled.div`\n  margin-top: 5px;\n`;\nexport const Container = styled.div`\n  display: flex;\n  gap: 15px;\n`;\n","import { Outlet, useParams } from 'react-router-dom';\nimport { useState, useEffect, Suspense } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport fetchMoviesDetails from 'Api/ApiFilmDetails';\nimport { Link } from 'react-router-dom';\nimport Loader from 'components/Loading/Loading';\nimport styled from '@emotion/styled';\nimport {\n  Title,\n  Information,\n  Owerview,\n  Scors,\n  AddInformation,\n  MovieDetailsLinkList,\n  AddInformationbox,\n  Container,\n} from './MovieDetails.styled';\nconst MovieDetails = () => {\n  const [filmDetails, setFilmDetails] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const StyledLink = styled(Link)`\n    color: black;\n\n    &:hover {\n      color: orange;\n    }\n  `;\n\n  const StyledLinkBtn = styled(Link)`\n    color: black;\n    text-decoration: none;\n    padding: 5px;\n    border: 1px solid;\n    margin-bottom: 5px;\n    display: block;\n    width: 60px;\n\n    &:hover {\n      color: orange;\n    }\n  `;\n\n  useEffect(() => {\n    fetchMoviesInformation(movieId);\n  }, [movieId]);\n\n  const fetchMoviesInformation = async movieId => {\n    setIsLoading(true);\n\n    try {\n      const response = await fetchMoviesDetails(movieId);\n      if (!response) {\n        throw new Error('No data :-(');\n      }\n\n      setFilmDetails(response);\n    } catch (error) {\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const posterPath = 'https://image.tmdb.org/t/p/w500';\n  const date = new Date(filmDetails.release_date);\n  const score = filmDetails.vote_average * 10;\n\n  return (\n    <div>\n      <StyledLinkBtn to={location.state?.from ?? '/'}>Go back</StyledLinkBtn>\n      <Container>\n        {' '}\n        <div>\n          <img src={`${posterPath}${filmDetails.poster_path}`} alt=\"\" />\n        </div>\n        <div>\n          <Title>\n            {filmDetails.title} ({date.getFullYear()})\n          </Title>\n          <Scors>User score:{Math.round(score)} %</Scors>\n          <Owerview>Owerview </Owerview>\n          <Information>{filmDetails.overview}</Information>\n        </div>\n      </Container>\n      <AddInformationbox>\n        <AddInformation>Additional information </AddInformation>\n        <MovieDetailsLinkList>\n          <li>\n            <StyledLink to=\"cast\">Cast</StyledLink>\n          </li>\n          <li>\n            <StyledLink to=\"reviews\">Reviews</StyledLink>\n          </li>\n        </MovieDetailsLinkList>\n      </AddInformationbox>\n      {isLoading && <Loader />}\n      <Suspense>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["LoaderBox","styled","Loader","strokeColor","strokeWidth","animationDuration","width","visible","options","method","headers","accept","Authorization","fetchMoviesDetails","movieId","axios","response","status","Error","data","Title","Scors","Owerview","Information","AddInformation","MovieDetailsLinkList","AddInformationbox","Container","useState","filmDetails","setFilmDetails","isLoading","setIsLoading","useParams","location","useLocation","StyledLink","Link","StyledLinkBtn","useEffect","fetchMoviesInformation","date","Date","release_date","score","vote_average","to","state","from","src","poster_path","alt","title","getFullYear","Math","round","overview","Suspense"],"sourceRoot":""}
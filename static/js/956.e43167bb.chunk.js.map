{"version":3,"file":"static/js/956.e43167bb.chunk.js","mappings":"gMACaA,E,QAAYC,EAAAA,IAAH,gN,SCEP,SAASC,IACtB,OACE,UAACF,EAAD,YACE,SAAC,KAAD,CACEG,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,IACT,MAIP,C,sJCfKC,EAAU,mCACD,SAAeC,EAA9B,+CAAe,OAAf,oBAAe,WAAkCC,GAAlC,uFACUC,EAAAA,EAAAA,IAAA,6CACiBD,EADjB,oBACoCF,EADpC,oBADV,WACPI,EADO,QAICC,OAJD,sBAKL,IAAIC,MAAMF,EAASC,QALd,gCAOND,EAASG,MAPH,kE,0DCDFC,EAAQf,EAAAA,EAAAA,GAAH,gDAGLgB,EAAQhB,EAAAA,EAAAA,EAAH,gDAGLiB,EAAWjB,EAAAA,EAAAA,EAAH,sEAIRkB,EAAclB,EAAAA,EAAAA,EAAH,gDAGXmB,EAAiBnB,EAAAA,EAAAA,IAAH,yFAKdoB,EAAuBpB,EAAAA,EAAAA,GAAH,yGAMpBqB,EAAoBrB,EAAAA,EAAAA,IAAH,mEAIjBsB,EAAYtB,EAAAA,EAAAA,IAAH,wDAITuB,EAAQvB,EAAAA,EAAAA,IAAH,2DAILwB,EAAWxB,EAAAA,EAAAA,IAAH,yC,SCkFrB,EAlGqB,WAAO,IAAD,IACzB,GAAsCyB,EAAAA,EAAAA,UAAS,CAAC,GAAhD,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQtB,GAAYuB,EAAAA,EAAAA,MAAZvB,QAEFwB,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAC1CC,GAAavC,EAAAA,EAAAA,GAAOwC,EAAAA,GAAPxC,CAAH,2FAQVyC,GAAgBzC,EAAAA,EAAAA,GAAOwC,EAAAA,GAAPxC,CAAH,mOAanB0C,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAmB,mCAAG,WAAMlC,GAAN,8EAC1BoB,GAAa,GADa,kBAGArB,EAAmBC,GAHnB,UAGlBmC,EAHkB,6BAKhB,IAAI/B,MAAM,gBALM,OAOxBc,EAAeiB,GAPS,kDASxBb,EAAS,EAAD,IATgB,yBAWxBF,GAAa,GAXW,6EAAH,sDAerBpB,GACFkC,EAAoBlC,EAEvB,GAAE,CAACA,IAEJ,IAAMoC,EAAO,IAAIC,KAAKpB,EAAYqB,cAC5BC,EAAmC,GAA3BtB,EAAYuB,aAE1B,OACE,4BACE,SAACR,EAAD,CAAeS,GAAIf,EAASgB,QAA5B,SAAqC,aACrC,UAAC7B,EAAD,WACGM,IAAa,SAAC,IAAD,IACbE,GAAS,mDACV,SAACN,EAAD,WACE,SAACD,EAAD,CACE6B,IACE1B,EAAY2B,YAAZ,0CACuC3B,EAAY2B,aAC/C,GAENC,IAAI,gBACJjD,MAAM,WAGV,4BACE,UAACU,EAAD,WACGW,EAAY6B,MAAM,KAAGV,EAAKW,cAAc,QAE3C,UAACxC,EAAD,WAAO,cAAYyC,KAAKC,MAAMV,GAAO,SACrC,SAAC/B,EAAD,UAAU,eACV,SAACC,EAAD,UAAcQ,EAAYiC,kBAG9B,UAACtC,EAAD,YACE,SAACF,EAAD,UAAgB,6BAChB,UAACC,EAAD,YACE,yBACE,SAACmB,EAAD,CAAYW,GAAG,OAAf,SAAsB,YAExB,yBACE,SAACX,EAAD,CAAYW,GAAG,UAAf,SAAyB,qBAK/B,SAAC,EAAAU,SAAD,WACE,SAAC,KAAD,QAIP,C","sources":["components/Loading/Loading.styled.jsx","components/Loading/Loading.jsx","Api/ApiFilmDetails.jsx","pages/MovieDetails.styled.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nexport const LoaderBox = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* background-color: #f4efef; */\n  width: 100vw;\n  height: 100vh;\n`;\n","import { RotatingLines } from 'react-loader-spinner';\nimport { LoaderBox } from './Loading.styled';\n\nexport default function Loader() {\n  return (\n    <LoaderBox>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n      ;\n    </LoaderBox>\n  );\n}\n","import axios from 'axios';\nconst API_KEY = '06075111d285d6889482cec4dafeab0f';\nexport default async function fetchMoviesDetails(movieId) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  if (!response.status) {\n    throw new Error(response.status);\n  }\n  return response.data;\n}\n","import styled from '@emotion/styled';\nexport const Title = styled.h1`\n  margin-bottom: 10px;\n`;\nexport const Scors = styled.p`\n  margin-bottom: 10px;\n`;\nexport const Owerview = styled.p`\n  margin-bottom: 10px;\n  font-weight: bold;\n`;\nexport const Information = styled.p`\n  margin-bottom: 10px;\n`;\nexport const AddInformation = styled.div`\n  margin-bottom: 5px;\n  font-size: 24px;\n  font-weight: bold;\n`;\nexport const MovieDetailsLinkList = styled.ul`\n  list-style: none;\n  display: flex;\n  gap: 50px;\n  justify-content: center;\n`;\nexport const AddInformationbox = styled.div`\n  text-align: center;\n  margin-top: 5px;\n`;\nexport const Container = styled.div`\n  display: flex;\n  gap: 15px;\n`;\nexport const Image = styled.img`\n  width: 300px;\n  height: 400px;\n`;\nexport const ImageBox = styled.div`\n  width: 400px;\n`;\n","import { Outlet, useParams } from 'react-router-dom';\nimport { useState, useEffect, Suspense } from 'react';\nimport { useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport fetchMoviesDetails from 'Api/ApiFilmDetails';\nimport { Link } from 'react-router-dom';\nimport Loader from 'components/Loading/Loading';\nimport styled from '@emotion/styled';\n\nimport {\n  Title,\n  Information,\n  Owerview,\n  Scors,\n  AddInformation,\n  MovieDetailsLinkList,\n  AddInformationbox,\n  Container,\n  Image,\n  ImageBox,\n} from './MovieDetails.styled';\nconst MovieDetails = () => {\n  const [filmDetails, setFilmDetails] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const { movieId } = useParams();\n\n  const location = useLocation();\n  const backLink = useRef(location.state?.from ?? '/');\n  const StyledLink = styled(Link)`\n    color: black;\n\n    &:hover {\n      color: orange;\n    }\n  `;\n\n  const StyledLinkBtn = styled(Link)`\n    color: black;\n    text-decoration: none;\n    padding: 5px;\n    border: 1px solid;\n    margin-bottom: 5px;\n    display: block;\n    width: 60px;\n\n    &:hover {\n      color: orange;\n    }\n  `;\n  useEffect(() => {\n    const getMovieInformation = async movieId => {\n      setIsLoading(true);\n      try {\n        const movieData = await fetchMoviesDetails(movieId);\n        if (!movieData) {\n          throw new Error('No data! :-(');\n        }\n        setFilmDetails(movieData); // Записуємо в стейт обєкт з даними\n      } catch (errorCaught) {\n        setError(errorCaught);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (movieId) {\n      getMovieInformation(movieId);\n    }\n  }, [movieId]);\n\n  const date = new Date(filmDetails.release_date);\n  const score = filmDetails.vote_average * 10;\n\n  return (\n    <div>\n      <StyledLinkBtn to={backLink.current}>Go back</StyledLinkBtn>\n      <Container>\n        {isLoading && <Loader />}\n        {error && 'Sorry, there is no data for the selected movie.'}\n        <ImageBox>\n          <Image\n            src={\n              filmDetails.poster_path\n                ? `https://image.tmdb.org/t/p/w400/${filmDetails.poster_path}`\n                : ''\n            }\n            alt=\"movie_picture\"\n            width=\"300\"\n          />\n        </ImageBox>\n        <div>\n          <Title>\n            {filmDetails.title} ({date.getFullYear()})\n          </Title>\n          <Scors>User score:{Math.round(score)} %</Scors>\n          <Owerview>Owerview </Owerview>\n          <Information>{filmDetails.overview}</Information>\n        </div>\n      </Container>\n      <AddInformationbox>\n        <AddInformation>Additional information </AddInformation>\n        <MovieDetailsLinkList>\n          <li>\n            <StyledLink to=\"cast\">Cast</StyledLink>\n          </li>\n          <li>\n            <StyledLink to=\"reviews\">Reviews</StyledLink>\n          </li>\n        </MovieDetailsLinkList>\n      </AddInformationbox>\n\n      <Suspense>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["LoaderBox","styled","Loader","strokeColor","strokeWidth","animationDuration","width","visible","API_KEY","fetchMoviesDetails","movieId","axios","response","status","Error","data","Title","Scors","Owerview","Information","AddInformation","MovieDetailsLinkList","AddInformationbox","Container","Image","ImageBox","useState","filmDetails","setFilmDetails","isLoading","setIsLoading","error","setError","useParams","location","useLocation","backLink","useRef","state","from","StyledLink","Link","StyledLinkBtn","useEffect","getMovieInformation","movieData","date","Date","release_date","score","vote_average","to","current","src","poster_path","alt","title","getFullYear","Math","round","overview","Suspense"],"sourceRoot":""}
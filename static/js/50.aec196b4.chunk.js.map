{"version":3,"file":"static/js/50.aec196b4.chunk.js","mappings":"+LACaA,E,QAAYC,EAAAA,IAAH,gN,SCEP,SAASC,IACtB,OACE,UAACF,EAAD,YACE,SAAC,KAAD,CACEG,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,IACT,MAIP,C,wKCfKC,EAAU,mCACD,SAAeC,EAA9B,+CAAe,OAAf,oBAAe,WAAgCC,GAAhC,uFACUC,EAAAA,EAAAA,IAAA,4DACgCH,EADhC,kBACiDE,EADjD,+CADV,WACPE,EADO,QAICC,OAJD,sBAKL,IAAIC,MAAMF,EAASC,QALd,gCAOND,EAASG,KAAKC,SAPR,kE,gDCDFC,EAAahB,EAAAA,EAAAA,GAAH,kH,SCOViB,EAAS,WAAO,IAAD,EAC1B,GAAyBC,EAAAA,EAAAA,UAAS,MAAlC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,IAAgB,IAAxD,eAAOC,EAAP,KAAqBC,EAArB,KACMhB,EAAK,UAAGe,EAAaE,IAAI,gBAApB,QAAgC,GACrCC,GAAWC,EAAAA,EAAAA,MACXC,GAAa7B,EAAAA,EAAAA,GAAO8B,EAAAA,GAAP9B,CAAH,4FAQhB+B,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,mCAAG,WAAMvB,GAAN,kFACtBa,GAAa,GADS,kBAIGd,EAAiBC,GAJpB,UAIdE,EAJc,6BAMZ,IAAIE,MAAM,eANE,OAQdoB,EAAkBtB,EAASuB,QAAO,SAAAC,GAAM,OAC5CA,EAAOC,MAAMC,cAAcC,SAAS7B,EAAM4B,cADE,IAGxCE,EAAYN,EAAgBO,KAAI,SAAAC,GACpC,OACE,SAACzB,EAAD,WACE,yBACE,SAACa,EAAD,CAAYa,GAAE,UAAKD,EAAKE,IAAMC,MAAO,CAAEC,KAAMlB,GAA7C,SACGc,EAAKL,WAHKK,EAAKE,GAQzB,IACDvB,EAASmB,GAtBW,2EAyBpBjB,GAAa,GAzBO,6EAAH,sDA6BrBU,EAAgBvB,EACjB,GAAE,CAACkB,EAAUlB,IAQd,OACE,iCACE,kBAAMqC,SARgB,SAAAC,GACxB,GAAyB,KAArBA,EAAIC,OAAOC,MACb,OAAOxB,EAAgB,CAAC,GAE1BA,EAAgB,CAAEhB,MAAOsC,EAAIC,OAAOC,OACrC,EAGG,WACE,kBAAOC,KAAK,OAAOC,KAAK,WACxB,mBAAQD,KAAK,SAAb,SAAsB,eAExB,yBAAM/B,IACLE,IAAa,SAAC,IAAD,MAGnB,EACD,G","sources":["components/Loading/Loading.styled.jsx","components/Loading/Loading.jsx","Api/ApiSearchMovies.jsx","pages/Movies.styled.jsx","pages/Movies.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nexport const LoaderBox = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* background-color: #f4efef; */\n  width: 100vw;\n  height: 100vh;\n`;\n","import { RotatingLines } from 'react-loader-spinner';\nimport { LoaderBox } from './Loading.styled';\n\nexport default function Loader() {\n  return (\n    <LoaderBox>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n      ;\n    </LoaderBox>\n  );\n}\n","import axios from 'axios';\nconst API_KEY = '06075111d285d6889482cec4dafeab0f';\nexport default async function fetchMovieSearch(query) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}&include_adult=false&language=en-US&page=1`\n  );\n  if (!response.status) {\n    throw new Error(response.status);\n  }\n  return response.data.results;\n}\n","import styled from '@emotion/styled';\nexport const MoviesList = styled.ul`\n  list-style: none;\n  margin-bottom: 5px;\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n","import { useSearchParams } from 'react-router-dom';\nimport fetchMovieSearch from 'Api/ApiSearchMovies';\nimport { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport Loader from 'components/Loading/Loading';\nimport styled from '@emotion/styled';\nimport { MoviesList } from './Movies.styled';\nexport const Movies = () => {\n  const [film, setFilms] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams('');\n  const query = searchParams.get('query') ?? '';\n  const location = useLocation();\n  const StyledLink = styled(Link)`\n    color: black;\n\n    &:hover {\n      color: orange;\n    }\n  `;\n\n  useEffect(() => {\n    const fetchMoviesList = async query => {\n      setIsLoading(true);\n\n      try {\n        const response = await fetchMovieSearch(query);\n        if (!response) {\n          throw new Error('No data :-(');\n        }\n        const visibleProducts = response.filter(respon =>\n          respon.title.toLowerCase().includes(query.toLowerCase())\n        );\n        const filmsList = visibleProducts.map(item => {\n          return (\n            <MoviesList key={item.id}>\n              <li>\n                <StyledLink to={`${item.id}`} state={{ from: location }}>\n                  {item.title}\n                </StyledLink>\n              </li>\n            </MoviesList>\n          );\n        });\n        setFilms(filmsList);\n      } catch (error) {\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMoviesList(query);\n  }, [location, query]);\n\n  const updateQueryString = evt => {\n    if (evt.target.value === '') {\n      return setSearchParams({});\n    }\n    setSearchParams({ query: evt.target.value });\n  };\n  return (\n    <>\n      <form onSubmit={updateQueryString}>\n        <input type=\"text\" name=\"query\" />\n        <button type=\"submit\">Search</button>\n      </form>\n      <div>{film}</div>\n      {isLoading && <Loader />}\n    </>\n  );\n};\nexport default Movies;\n"],"names":["LoaderBox","styled","Loader","strokeColor","strokeWidth","animationDuration","width","visible","API_KEY","fetchMovieSearch","query","axios","response","status","Error","data","results","MoviesList","Movies","useState","film","setFilms","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","get","location","useLocation","StyledLink","Link","useEffect","fetchMoviesList","visibleProducts","filter","respon","title","toLowerCase","includes","filmsList","map","item","to","id","state","from","onSubmit","evt","target","value","type","name"],"sourceRoot":""}
{"version":3,"file":"static/js/633.31717230.chunk.js","mappings":"gMACaA,E,QAAYC,EAAAA,IAAH,gN,SCEP,SAASC,IACtB,OACE,UAACF,EAAD,YACE,SAAC,KAAD,CACEG,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,IACT,MAIP,C,0KCdKC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIS,SAAeC,EAA9B,+CAAe,OAAf,oBAAe,WAAkCC,GAAlC,uFACUC,EAAAA,EAAAA,IAAA,6CACiBD,EADjB,2BAErBN,GAHW,WACPQ,EADO,QAKCC,OALD,sBAML,IAAIC,MAAMF,EAASC,QANd,gCAQND,EAASG,KAAKC,SARR,kE,qCCVFC,EAASpB,EAAAA,EAAAA,EAAH,sEAINqB,EAAUrB,EAAAA,EAAAA,EAAH,gD,SCAPsB,EAAU,WACrB,IAAQT,GAAYU,EAAAA,EAAAA,MAAZV,QACR,GAAoCW,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,MACAC,EAAAA,EAAAA,YAAU,WACRC,EAAkBjB,EACnB,GAAE,CAACA,IAEJ,IAAMiB,EAAiB,mCAAG,WAAMjB,GAAN,gFACxBe,GAAa,GADW,kBAIChB,EAAmBC,GAJpB,UAIhBE,EAJgB,6BAMd,IAAIE,MAAM,eANI,OAShBc,EAAiBhB,EAASiB,KAAI,SAAAC,GAClC,OACE,4BACE,SAACb,EAAD,UAASa,EAAKC,UACd,SAACb,EAAD,UAAUY,EAAKE,YAFPF,EAAKG,GAKlB,IACDV,EAAcK,GAjBQ,2EAoBtBH,GAAa,GApBS,6EAAH,sDAwBvB,OACE,2BACGH,EACAE,IAAa,SAAC,IAAD,MAGnB,EACD,G","sources":["components/Loading/Loading.styled.jsx","components/Loading/Loading.jsx","Api/ApiFilmsReviews.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nexport const LoaderBox = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* background-color: #f4efef; */\n  width: 100vw;\n  height: 100vh;\n`;\n","import { RotatingLines } from 'react-loader-spinner';\nimport { LoaderBox } from './Loading.styled';\n\nexport default function Loader() {\n  return (\n    <LoaderBox>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n      ;\n    </LoaderBox>\n  );\n}\n","import axios from 'axios';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwNjA3NTExMWQyODVkNjg4OTQ4MmNlYzRkYWZlYWIwZiIsInN1YiI6IjY0NzBhYjk4NTQzN2Y1MDEwNTVkNGIxZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.mRwEl_U4MyMEALk_4oMS15bcG2msMRPjTcvYuIf-KU8',\n  },\n};\n\nexport default async function fetchMoviesReviews(movieId) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?language=en-US`,\n    options\n  );\n  if (!response.status) {\n    throw new Error(response.status);\n  }\n  return response.data.results;\n}\n","import styled from '@emotion/styled';\nexport const Athour = styled.p`\n  font-weight: bold;\n  margin-bottom: 10px;\n`;\nexport const Content = styled.p`\n  margin-bottom: 10px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport fetchMoviesReviews from 'Api/ApiFilmsReviews';\nimport Loader from 'components/Loading/Loading';\nimport { Athour, Content } from './Reviews.styled';\nexport const Reviews = () => {\n  const { movieId } = useParams();\n  const [filmReview, setFilmReview] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    fetchMoviesCovers(movieId);\n  }, [movieId]);\n\n  const fetchMoviesCovers = async movieId => {\n    setIsLoading(true);\n\n    try {\n      const response = await fetchMoviesReviews(movieId);\n      if (!response) {\n        throw new Error('No data :-(');\n      }\n\n      const changeReviewss = response.map(item => {\n        return (\n          <div key={item.id}>\n            <Athour>{item.author}</Athour>\n            <Content>{item.content}</Content>\n          </div>\n        );\n      });\n      setFilmReview(changeReviewss);\n    } catch (error) {\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      {filmReview}\n      {isLoading && <Loader />}\n    </div>\n  );\n};\nexport default Reviews;\n"],"names":["LoaderBox","styled","Loader","strokeColor","strokeWidth","animationDuration","width","visible","options","method","headers","accept","Authorization","fetchMoviesReviews","movieId","axios","response","status","Error","data","results","Athour","Content","Reviews","useParams","useState","filmReview","setFilmReview","isLoading","setIsLoading","useEffect","fetchMoviesCovers","changeReviewss","map","item","author","content","id"],"sourceRoot":""}
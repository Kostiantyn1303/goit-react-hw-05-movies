{"version":3,"file":"static/js/212.14806540.chunk.js","mappings":"uRAEMA,EAAU,mCAED,SAAeC,EAA9B,+CAAe,OAAf,oBAAe,WAA+BC,GAA/B,uFACUC,EAAAA,EAAAA,IAAA,6CACiBD,EADjB,4BAC4CF,EAD5C,oBADV,WACPI,EADO,QAICC,OAJD,sBAKL,IAAIC,MAAMF,EAASC,QALd,gCAOND,EAASG,MAPH,kE,uCCHFC,EAAUC,EAAAA,EAAAA,IAAH,8GAMPC,EAAYD,EAAAA,EAAAA,IAAH,yCAGTE,EAAUF,EAAAA,EAAAA,IAAH,gF,SCLPG,EAAO,WAClB,IAAQV,GAAYW,EAAAA,EAAAA,MAAZX,QACR,GAAgCY,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,MACAC,EAAAA,EAAAA,YAAU,WACRC,EAAkBpB,EACnB,GAAE,CAACA,IAEJ,IAAMoB,EAAiB,mCAAG,WAAMpB,GAAN,kFACxBgB,GAAa,GADW,kBAICjB,EAAgBC,GAJjB,WAIhBE,EAJgB,QAKRmB,KAAKC,OALG,sBAMd,IAAIlB,MAAM,eANI,OAQhBmB,EAASrB,EAASmB,KAAKG,KAAI,SAAAC,GAC/B,OACE,UAACjB,EAAD,YACE,SAACC,EAAD,CACEiB,IACED,EAAKE,aAAL,0CACuCF,EAAKE,cACxC,GAENC,IAAKH,EAAKI,QAEZ,yBAAG,SAAOJ,EAAKI,SACf,yBAAG,cAAYJ,EAAKK,eAVNL,EAAKM,GAaxB,IACKC,EAAiBT,EAAOC,KAAI,SAAAS,GAChC,OAAOA,CACR,IACDnB,EAAYkB,GA3BU,kDA6BtBd,EAAS,EAAD,IA7Bc,yBA+BtBF,GAAa,GA/BS,6EAAH,sDAoCvB,OAFAkB,QAAQC,IAAIlB,IAGV,UAACX,EAAD,WACGW,IAAS,uBAAG,4DACZJ,EACAE,IAAa,SAAC,IAAD,MAGnB,EACD,G,gFCzDaqB,E,QAAY7B,EAAAA,IAAH,gN,SCEP,SAAS8B,IACtB,OACE,UAACD,EAAD,YACE,SAAC,KAAD,CACEE,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,IACT,MAIP,C","sources":["Api/ApiFilmsCast.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Loading/Loading.styled.jsx","components/Loading/Loading.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '06075111d285d6889482cec4dafeab0f';\n\nexport default async function fetchMoviesCast(movieId) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  if (!response.status) {\n    throw new Error(response.status);\n  }\n  return response.data;\n}\n","import styled from '@emotion/styled';\nexport const CastBox = styled.div`\n  display: flex;\n  gap: 10px;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\nexport const CastItems = styled.div`\n  width: 150px;\n`;\nexport const CastImg = styled.img`\n  max-width: 100%;\n  display: block;\n  height: auto;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport fetchMoviesCast from 'Api/ApiFilmsCast';\nimport Loader from 'components/Loading/Loading';\nimport { CastBox, CastItems, CastImg } from './Cast.styled';\nexport const Cast = () => {\n  const { movieId } = useParams();\n  const [filmCast, setFilmCast] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    fetchMoviesActors(movieId);\n  }, [movieId]);\n\n  const fetchMoviesActors = async movieId => {\n    setIsLoading(true);\n\n    try {\n      const response = await fetchMoviesCast(movieId);\n      if (!response.cast.length) {\n        throw new Error('No data :-(');\n      }\n      const change = response.cast.map(item => {\n        return (\n          <CastItems key={item.id}>\n            <CastImg\n              src={\n                item.profile_path\n                  ? `https://image.tmdb.org/t/p/w200/${item.profile_path}`\n                  : ''\n              }\n              alt={item.name}\n            />\n            <p>Name: {item.name}</p>\n            <p>Character: {item.character}</p>\n          </CastItems>\n        );\n      });\n      const changeForState = change.map(a => {\n        return a;\n      });\n      setFilmCast(changeForState);\n    } catch (errorCaught) {\n      setError(errorCaught);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  console.log(error);\n\n  return (\n    <CastBox>\n      {error && <p>We don't have any information about cast of this film .</p>}\n      {filmCast}\n      {isLoading && <Loader />}\n    </CastBox>\n  );\n};\nexport default Cast;\n","import styled from '@emotion/styled';\nexport const LoaderBox = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* background-color: #f4efef; */\n  width: 100vw;\n  height: 100vh;\n`;\n","import { RotatingLines } from 'react-loader-spinner';\nimport { LoaderBox } from './Loading.styled';\n\nexport default function Loader() {\n  return (\n    <LoaderBox>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n      ;\n    </LoaderBox>\n  );\n}\n"],"names":["API_KEY","fetchMoviesCast","movieId","axios","response","status","Error","data","CastBox","styled","CastItems","CastImg","Cast","useParams","useState","filmCast","setFilmCast","isLoading","setIsLoading","error","setError","useEffect","fetchMoviesActors","cast","length","change","map","item","src","profile_path","alt","name","character","id","changeForState","a","console","log","LoaderBox","Loader","strokeColor","strokeWidth","animationDuration","width","visible"],"sourceRoot":""}